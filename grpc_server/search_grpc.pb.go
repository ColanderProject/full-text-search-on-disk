// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protobuf/search.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	// DocID
	URL2ID(ctx context.Context, in *URL, opts ...grpc.CallOption) (*DocID, error)
	GetMaxURL(ctx context.Context, in *GetMaxURLRequest, opts ...grpc.CallOption) (*DocID, error)
	// Get Header
	GetDocumentHeader(ctx context.Context, in *DocID, opts ...grpc.CallOption) (*DocHeader, error)
	GetDocumentHeaderByURL(ctx context.Context, in *URL, opts ...grpc.CallOption) (*DocHeader, error)
	// Get Children Docs
	GetChildDoc(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocList, error)
	GetChildDocId(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocIdList, error)
	// Server Mode
	GetMode(ctx context.Context, in *GetModeRequest, opts ...grpc.CallOption) (*ServerState, error)
	SetMode(ctx context.Context, in *ServerState, opts ...grpc.CallOption) (*SetModeResponse, error)
	// Modify
	DeleteDocument(ctx context.Context, in *DocID, opts ...grpc.CallOption) (*DeleteResponse, error)
	InsertDocument(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error)
	UpdateDocument(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Search
	SearchForDocId(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DocIdList, error)
	SearchForHeader(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DocHeaderList, error)
	SearchForDocument(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DocList, error)
	// Index building
	DoCompact(ctx context.Context, in *DoCompactRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) URL2ID(ctx context.Context, in *URL, opts ...grpc.CallOption) (*DocID, error) {
	out := new(DocID)
	err := c.cc.Invoke(ctx, "/SearchService/URL2ID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetMaxURL(ctx context.Context, in *GetMaxURLRequest, opts ...grpc.CallOption) (*DocID, error) {
	out := new(DocID)
	err := c.cc.Invoke(ctx, "/SearchService/GetMaxURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetDocumentHeader(ctx context.Context, in *DocID, opts ...grpc.CallOption) (*DocHeader, error) {
	out := new(DocHeader)
	err := c.cc.Invoke(ctx, "/SearchService/GetDocumentHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetDocumentHeaderByURL(ctx context.Context, in *URL, opts ...grpc.CallOption) (*DocHeader, error) {
	out := new(DocHeader)
	err := c.cc.Invoke(ctx, "/SearchService/GetDocumentHeaderByURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetChildDoc(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocList, error) {
	out := new(DocList)
	err := c.cc.Invoke(ctx, "/SearchService/GetChildDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetChildDocId(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocIdList, error) {
	out := new(DocIdList)
	err := c.cc.Invoke(ctx, "/SearchService/GetChildDocId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetMode(ctx context.Context, in *GetModeRequest, opts ...grpc.CallOption) (*ServerState, error) {
	out := new(ServerState)
	err := c.cc.Invoke(ctx, "/SearchService/GetMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SetMode(ctx context.Context, in *ServerState, opts ...grpc.CallOption) (*SetModeResponse, error) {
	out := new(SetModeResponse)
	err := c.cc.Invoke(ctx, "/SearchService/SetMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteDocument(ctx context.Context, in *DocID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/SearchService/DeleteDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) InsertDocument(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/SearchService/InsertDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateDocument(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/SearchService/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchForDocId(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DocIdList, error) {
	out := new(DocIdList)
	err := c.cc.Invoke(ctx, "/SearchService/SearchForDocId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchForHeader(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DocHeaderList, error) {
	out := new(DocHeaderList)
	err := c.cc.Invoke(ctx, "/SearchService/SearchForHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchForDocument(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*DocList, error) {
	out := new(DocList)
	err := c.cc.Invoke(ctx, "/SearchService/SearchForDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DoCompact(ctx context.Context, in *DoCompactRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/SearchService/DoCompact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/SearchService/UpdateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	// DocID
	URL2ID(context.Context, *URL) (*DocID, error)
	GetMaxURL(context.Context, *GetMaxURLRequest) (*DocID, error)
	// Get Header
	GetDocumentHeader(context.Context, *DocID) (*DocHeader, error)
	GetDocumentHeaderByURL(context.Context, *URL) (*DocHeader, error)
	// Get Children Docs
	GetChildDoc(context.Context, *DocumentRequest) (*DocList, error)
	GetChildDocId(context.Context, *DocumentRequest) (*DocIdList, error)
	// Server Mode
	GetMode(context.Context, *GetModeRequest) (*ServerState, error)
	SetMode(context.Context, *ServerState) (*SetModeResponse, error)
	// Modify
	DeleteDocument(context.Context, *DocID) (*DeleteResponse, error)
	InsertDocument(context.Context, *InsertRequest) (*InsertResponse, error)
	UpdateDocument(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Search
	SearchForDocId(context.Context, *SearchRequest) (*DocIdList, error)
	SearchForHeader(context.Context, *SearchRequest) (*DocHeaderList, error)
	SearchForDocument(context.Context, *SearchRequest) (*DocList, error)
	// Index building
	DoCompact(context.Context, *DoCompactRequest) (*GeneralResponse, error)
	UpdateIndex(context.Context, *UpdateIndexRequest) (*GeneralResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) URL2ID(context.Context, *URL) (*DocID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method URL2ID not implemented")
}
func (UnimplementedSearchServiceServer) GetMaxURL(context.Context, *GetMaxURLRequest) (*DocID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxURL not implemented")
}
func (UnimplementedSearchServiceServer) GetDocumentHeader(context.Context, *DocID) (*DocHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentHeader not implemented")
}
func (UnimplementedSearchServiceServer) GetDocumentHeaderByURL(context.Context, *URL) (*DocHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentHeaderByURL not implemented")
}
func (UnimplementedSearchServiceServer) GetChildDoc(context.Context, *DocumentRequest) (*DocList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildDoc not implemented")
}
func (UnimplementedSearchServiceServer) GetChildDocId(context.Context, *DocumentRequest) (*DocIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildDocId not implemented")
}
func (UnimplementedSearchServiceServer) GetMode(context.Context, *GetModeRequest) (*ServerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMode not implemented")
}
func (UnimplementedSearchServiceServer) SetMode(context.Context, *ServerState) (*SetModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMode not implemented")
}
func (UnimplementedSearchServiceServer) DeleteDocument(context.Context, *DocID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedSearchServiceServer) InsertDocument(context.Context, *InsertRequest) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDocument not implemented")
}
func (UnimplementedSearchServiceServer) UpdateDocument(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedSearchServiceServer) SearchForDocId(context.Context, *SearchRequest) (*DocIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForDocId not implemented")
}
func (UnimplementedSearchServiceServer) SearchForHeader(context.Context, *SearchRequest) (*DocHeaderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForHeader not implemented")
}
func (UnimplementedSearchServiceServer) SearchForDocument(context.Context, *SearchRequest) (*DocList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForDocument not implemented")
}
func (UnimplementedSearchServiceServer) DoCompact(context.Context, *DoCompactRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCompact not implemented")
}
func (UnimplementedSearchServiceServer) UpdateIndex(context.Context, *UpdateIndexRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndex not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_URL2ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).URL2ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/URL2ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).URL2ID(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetMaxURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaxURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetMaxURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/GetMaxURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetMaxURL(ctx, req.(*GetMaxURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetDocumentHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetDocumentHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/GetDocumentHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetDocumentHeader(ctx, req.(*DocID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetDocumentHeaderByURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetDocumentHeaderByURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/GetDocumentHeaderByURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetDocumentHeaderByURL(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetChildDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetChildDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/GetChildDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetChildDoc(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetChildDocId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetChildDocId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/GetChildDocId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetChildDocId(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/GetMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetMode(ctx, req.(*GetModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/SetMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SetMode(ctx, req.(*ServerState))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/DeleteDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteDocument(ctx, req.(*DocID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_InsertDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).InsertDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/InsertDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).InsertDocument(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateDocument(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchForDocId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchForDocId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/SearchForDocId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchForDocId(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchForHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchForHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/SearchForHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchForHeader(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchForDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SearchForDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/SearchForDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SearchForDocument(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DoCompact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoCompactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DoCompact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/DoCompact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DoCompact(ctx, req.(*DoCompactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_UpdateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).UpdateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/UpdateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).UpdateIndex(ctx, req.(*UpdateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "URL2ID",
			Handler:    _SearchService_URL2ID_Handler,
		},
		{
			MethodName: "GetMaxURL",
			Handler:    _SearchService_GetMaxURL_Handler,
		},
		{
			MethodName: "GetDocumentHeader",
			Handler:    _SearchService_GetDocumentHeader_Handler,
		},
		{
			MethodName: "GetDocumentHeaderByURL",
			Handler:    _SearchService_GetDocumentHeaderByURL_Handler,
		},
		{
			MethodName: "GetChildDoc",
			Handler:    _SearchService_GetChildDoc_Handler,
		},
		{
			MethodName: "GetChildDocId",
			Handler:    _SearchService_GetChildDocId_Handler,
		},
		{
			MethodName: "GetMode",
			Handler:    _SearchService_GetMode_Handler,
		},
		{
			MethodName: "SetMode",
			Handler:    _SearchService_SetMode_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _SearchService_DeleteDocument_Handler,
		},
		{
			MethodName: "InsertDocument",
			Handler:    _SearchService_InsertDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _SearchService_UpdateDocument_Handler,
		},
		{
			MethodName: "SearchForDocId",
			Handler:    _SearchService_SearchForDocId_Handler,
		},
		{
			MethodName: "SearchForHeader",
			Handler:    _SearchService_SearchForHeader_Handler,
		},
		{
			MethodName: "SearchForDocument",
			Handler:    _SearchService_SearchForDocument_Handler,
		},
		{
			MethodName: "DoCompact",
			Handler:    _SearchService_DoCompact_Handler,
		},
		{
			MethodName: "UpdateIndex",
			Handler:    _SearchService_UpdateIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/search.proto",
}
